import{i as v,S as f,H as P,h as U,I as F,J as V,d as q,w as T,f as W}from"./assets/types-utils-b6046417.js";import{P as u}from"./assets/rpc-error-1c9e9050.js";import{p as Z}from"./assets/misc-e666ab72.js";const B='<svg xmlns="http://www.w3.org/2000/svg" width="400" height="400" fill="none"><path fill="#fff" fill-rule="evenodd" d="M260.543 0c40.157 0 60.23 0 81.847 6.833a84.954 84.954 0 0 1 50.777 50.777C400 79.223 400 99.303 400 139.457v121.086c0 40.157 0 60.23-6.833 81.847a84.938 84.938 0 0 1-50.777 50.773C320.773 400 300.7 400 260.543 400H139.457c-40.157 0-60.234 0-81.847-6.837A84.937 84.937 0 0 1 6.833 342.39C0 320.773 0 300.7 0 260.543V139.457C0 99.303 0 79.223 6.833 57.61A84.953 84.953 0 0 1 57.61 6.833C79.223 0 99.3 0 139.457 0h121.086Z" clip-rule="evenodd"/><mask id="a" width="400" height="400" x="0" y="0" maskUnits="userSpaceOnUse" style="mask-type:luminance"><path fill="#fff" fill-rule="evenodd" d="M260.543 0c40.157 0 60.23 0 81.847 6.833a84.954 84.954 0 0 1 50.777 50.777C400 79.223 400 99.303 400 139.457v121.086c0 40.157 0 60.23-6.833 81.847a84.938 84.938 0 0 1-50.777 50.773C320.773 400 300.7 400 260.543 400H139.457c-40.157 0-60.234 0-81.847-6.837A84.937 84.937 0 0 1 6.833 342.39C0 320.773 0 300.7 0 260.543V139.457C0 99.303 0 79.223 6.833 57.61A84.953 84.953 0 0 1 57.61 6.833C79.223 0 99.3 0 139.457 0h121.086Z" clip-rule="evenodd"/></mask><g fill-rule="evenodd" clip-rule="evenodd" mask="url(#a)"><path fill="#FEFEFE" d="M199.804 39.85 59.376 119.957V280.18l140.428 80.117L340.23 280.18V119.957L199.804 39.85Z"/><path fill="#002D72" d="M199.804 39.85 59.376 119.957V280.18l140.428 80.117L340.23 280.18V119.957L199.804 39.85Zm-55.445 69.266h110.514l13.324 55.672H131.538l12.821-55.672Zm31.842 95.175-12.052-31.094h71.563l-11.799 31.094 3.426 34.737-27.535.126h-27.282l3.679-34.863Zm35.153 71.601v-11.03l24.739-23.448v-36.997l32.358-20.81 36.925 27.459-50.257 86.523h-19.916l-23.849-21.697ZM94.24 211.066l37.042-27.209 32.739 20.56v36.997l24.739 23.448v11.03l-23.847 21.948h-20.179L94.24 211.066Z"/><path fill="url(#b)" d="M255.12 297.589h-19.918l-23.847-21.697v-11.03l24.739-23.448v-36.997l32.356-20.81 36.927 27.459-50.257 86.523Zm-55.317-257.74v69.268h55.069l13.326 55.672h-68.395v8.41h35.909l-11.798 31.092 3.424 34.737-27.535.125v121.143l140.428-80.115V119.957L199.803 39.85Z" style="mix-blend-mode:multiply"/><path fill="url(#c)" d="m188.761 275.892-23.849 21.948h-20.178l-50.495-86.774 37.044-27.208 32.739 20.559v36.997l24.739 23.448v11.03Zm-16.239-36.739 3.678-34.862-12.051-31.092h35.654v-8.41h-68.266l12.823-55.672h55.443V39.85L59.375 119.957v160.224l140.428 80.115V239.153h-27.281Z" style="mix-blend-mode:multiply"/></g><defs><linearGradient id="b" x1="325.255" x2="325.255" y1="325.727" y2="73.629" gradientUnits="userSpaceOnUse"><stop stop-color="#002D72"/><stop offset="1" stop-color="#002D72" stop-opacity=".01"/></linearGradient><linearGradient id="c" x1="184.827" x2="184.827" y1="325.727" y2="73.629" gradientUnits="userSpaceOnUse"><stop stop-color="#002D72" stop-opacity=".01"/><stop offset="1" stop-color="#002D72"/></linearGradient></defs></svg>';function G(){const s=document,t=location;function e(){const a=s.getElementsByTagName("link"),h=[];for(let d=0;d<a.length;d++){const m=a[d],g=m.getAttribute("rel");if(g&&g.toLowerCase().indexOf("icon")>-1){const c=m.getAttribute("href");if(c)if(c.toLowerCase().indexOf("https:")===-1&&c.toLowerCase().indexOf("http:")===-1&&c.indexOf("//")!==0&&c.indexOf("data:")!==0){let y=t.protocol+"//"+t.host;if(c.indexOf("/")===0)y+=c;else{const R=t.pathname.split("/");R.pop();const D=R.join("/");y+=D+"/"+c}h.push(y)}else if(c.indexOf("//")===0){const y=t.protocol+c;h.push(y)}else h.push(c)}}return h}function n(...a){const h=s.getElementsByTagName("meta");for(let d=0;d<h.length;d++){const m=h[d],g=["itemprop","property","name"].map(c=>m.getAttribute(c)).filter(c=>c?a.includes(c):!1);if(g.length&&g){const c=m.getAttribute("content");if(c)return c}}return""}function i(){let a=n("name","og:site_name","og:title","twitter:title");return a||(a=s.title),a}function o(){return n("description","og:description","twitter:description","keywords")}const r=i(),p=o(),l=t.origin,C=e();return{description:p,url:l,icons:C,name:r}}const w=G;class K{connected=!0;_events=[];constructor(){window.addEventListener("message",this._receiveMessageFromContentScript),this.send=this.send.bind(this)}_receiveMessageFromContentScript=t=>{const e=t.data;if(e?.type!=="defi-connector-proxy-request-response")return;const n=e.payload;if(!v(n))return;const i=this._events.filter(o=>o.event==="message");i&&i.length&&i.forEach(o=>o.callback(n))};send(t){if(!v(t))throw new Error("message not a KoaMessage format");this._proxySendMsg(t)}on=(t,e)=>{this._events.push({event:t,callback:e})};_proxySendMsg(t){window.postMessage({type:"defi-connector-proxy-request",payload:t},location.origin)}}class b extends f{transport;constructor(){super(),this.transport=new K,this.sendRequest=this.sendRequest.bind(this),this.transport.on("message",t=>{if(!v(t))return;const{payload:e}=t;P(e)?this.emit(e.method,e):U(e)&&this.emit(`response-${e.id}`,e)})}sendRequest(t){const{method:e,params:n=[],id:i}=t,o={from:location.origin,to:"",payload:{method:e,params:n,id:i??Z(),jsonrpc:"2.0"}};return this.transport.send(o),new Promise((r,p)=>{this.once(`response-${o.payload.id}`,l=>{F(l)?r(l.result):V(l)?p(l.error):p(new Error("can not parse the response"))})})}sendResponseRaw(t){const e={from:location.origin,to:"",payload:t};this.transport.send(e)}sendResponse(t){const e={id:t.requestId,jsonrpc:"2.0",result:t.result,error:t.error};this.sendResponseRaw(e)}}class x extends f{session;rpcClient;eip6963;constructor(t){super(),this.rpcClient=new b,this.eip6963=t?.eip6963??!1,this.rpcClient.on("dc_sessionUpdate",e=>{const n=e.params[0];n&&n.approved?(this.session?.approved||(this.session=n,this.emit("connect",n)),this.session=n,this.emit("update",n)):(this.session=n,this.emit("disconnect"),this.emit("update",n))}),this.rpcClient.on("dapp_pong",()=>{this.rpcClient.sendRequest({method:"dapp_ping"})})}async connectEagerly(t){if(this.session)return this.session.accounts??[];try{const e=await this.rpcClient.sendRequest({method:"dc_sessionInit",params:[{...t,peerMeta:w(),eip6963:this.eip6963}]});this.session=e,this.emit("connect",e),this.emit("update",e)}catch{}return this.session?.accounts??[]}async connect(t){const e=await this.rpcClient.sendRequest({method:"dc_sessionRequest",params:[{...t,peerMeta:w(),eip6963:this.eip6963}]});return e&&(this.session=e,this.emit("connect",e),this.emit("update",e)),this.session?.accounts??[]}async disconnect(){return this.session&&(this.session={approved:!1,chainId:this.session.chainId,chainType:this.session.chainType,accounts:[],wallets:[],selectedWalletId:null}),this.emit("disconnect"),this.emit("update",this.session),this.rpcClient.sendRequest({method:"dc_sessionUpdate",params:[{approved:!1}]})}}var A=(s=>(s.Testnet="Testnet",s.Mainnet="Mainnet",s.Devnet="Devnet",s["Aptos Testnet"]="Testnet",s.Aptos="Mainnet",s["Aptos Devnet"]="Devnet",s))(A||{});class M extends f{connectorClient;networkNames;constructor(){super(),this.connectorClient=new x,this.connectorClient.on("connect",()=>{this.emit("connect",{chainId:this.chainId,accounts:this.accounts})}),this.connectorClient.on("disconnect",()=>{this.emit("disconnect",{code:4900,message:"disconnect"})}),this.connectorClient.on("update",()=>{this.emit("chainChanged",this.chainId),this.emit("accountsChanged",this.accounts)}),this.connectorClient.rpcClient.on("dc_requestDappClientMeta",t=>{const e=w();this.connectorClient.rpcClient.sendResponse({requestId:t.id,result:e})}),this.networkNames={1:"Mainnet",2:"Testnet"}}get chainId(){return this.connectorClient.session?.chainId??""}get networkVersion(){return this.connectorClient.session?.chainId??"1"}get accounts(){return(this.connectorClient.session?.accounts??[]).map(e=>e.toLocaleLowerCase())}get chainType(){return this.connectorClient.session?.chainType}get wallets(){return this.connectorClient.session?.wallets||[]}get publicKey(){return this.wallets[0]?.addresses?.aptos?.pubkey||""}async account(){if(await this.connectorClient.connectEagerly(),!this.connectorClient.session?.approved)throw new u(4001,"Unauthorized");return{address:this.wallets[0]?.addresses.aptos.address,publicKey:"0x"+q.Buffer.from(this.publicKey,"base64").toString("hex"),method:"connected",status:200}}async network(){if(await this.connectorClient.connectEagerly(),!this.connectorClient.session?.approved)throw new u(4001,"Unauthorized");let t=this.networkNames[this.chainId];if(t)return t;const e=this.connectorClient.session?.network?.display;return t=A[e]??"Devnet",t}onDisconnect(t){this.connectorClient.on("disconnect",async()=>{t()})}async connect(t){if(this.publicKey)return this.account();await this.connectorClient.connect({chainType:"aptos",chainId:"1",...t});const e=this.wallets,n=this.publicKey;if(!n)throw this.connectorClient.emit("disconnect"),new u(4001,"Crypto.com | Wallet Extension: No existing Aptos wallet. Please add one on wallet extension manually.");return setTimeout(()=>{this.connectorClient.emit("update")},500),Promise.resolve({address:e[0].addresses.aptos.address,publicKey:"0x"+q.Buffer.from(n,"base64").toString("hex"),method:"connected",status:200})}async isConnected(){return await this.connectorClient.connectEagerly(),!!this.publicKey}async sendRequest(t,e){if(!this.connectorClient.session?.approved)throw new u(4001,"Unauthorized");if(this.chainType!=="aptos")throw new u(4001,"Crypto.com | Wallet Extension: Wrong network. Please switch your network to Aptos on wallet extension manually.");return this.connectorClient.rpcClient.sendRequest({method:t,params:e})}async signMessage(t){const e=[{transaction:t}];return this.sendRequest("aptos_signMessage",e)}async disconnect(){this.connectorClient.disconnect()}async getAccount(t){return this.sendRequest("aptos_getAccount",[{address:t}])}async getChainId(){return this.sendRequest("aptos_getChainId")}async getLedgerInfo(){return this.sendRequest("aptos_getLedgerInfo")}async getTransactions(t){return this.sendRequest("aptos_getTransactions",[{query:t}])}async getTransactionByHash(t){return this.sendRequest("aptos_getTransactionByHash",[{txnHash:t}])}async getAccountTransactions(t,e){return this.sendRequest("aptos_getAccountTransactions",[{address:t,query:e}])}async getAccountResources(t,e){return this.sendRequest("aptos_getAccountResources",[{address:t,query:e}])}async createCollection(t,e,n){return this.sendRequest("aptos_createCollection",[{name:t,description:e,url:n}])}async createToken(t,e,n,i,o,r,p,l,C,_,a,h){return this.sendRequest("aptos_createToken",[{collectionName:t,name:e,description:n,supply:i,url:o,max:r,royalty_payee_address:p,royalty_points_denominator:l,royalty_points_numerator:C,property_keys:_,property_values:a,property_types:h}])}}class J extends M{async onAccountChange(t){this.connectorClient.on("update",async()=>{const e=await this.account();t(e.address)})}async onNetworkChange(t){this.connectorClient.on("update",async()=>{const e=await this.network();t(e)})}async generateTransaction(t,e,n){const i=[{sender:t,payload:e,options:n}];return this.sendRequest("aptos_generateTransaction",i)}async signTransaction(t){const e=[{transaction:t}];return this.sendRequest("aptos_signTransactionMartian",e)}async submitTransaction(t){const e=[{transaction:t}];return this.sendRequest("aptos_submitTransactionMartian",e)}async signAndSubmitTransaction(t){const e=[{transaction:t}];return this.sendRequest("aptos_signAndSubmitTransactionMartian",e)}async generateSignAndSubmitTransaction(t,e,n){const i=[{sender:t,payload:e,options:n}];return this.sendRequest("aptos_generateSignAndSubmitTransaction",i)}async signGenericTransaction(t){const e=[{payload:t}];return this.sendRequest("aptos_signGenericTransaction",e)}}class N extends M{async onAccountChange(t){this.connectorClient.on("update",async()=>{const e=await this.account();t(e)})}async onNetworkChange(t){this.connectorClient.on("update",async()=>{const e=await this.network();t({networkName:e})})}async signTransaction(t,e){const n=[{transaction:t,options:e}];return this.sendRequest("aptos_signTransaction",n)}async signAndSubmitTransaction(t,e){const n=[{transaction:t,options:e}];return this.sendRequest("aptos_signAndSubmitTransaction",n)}}class j extends f{session;rpcClient;constructor(){super(),this.rpcClient=new b,this.rpcClient.on("dc_sessionUpdate",t=>{const e=t.params[0];e&&e.approved?(this.session?.approved||(this.session=e,this.emit("connect",e)),this.session=e,this.emit("update",e),this.emit("session_update",null,t)):(this.session=e,this.emit("disconnect"),this.emit("update",e))})}async connectEagerly(t){const e=await this.rpcClient.sendRequest({method:"dc_sessionInit",params:[{...t,peerMeta:w()}]});return e&&(this.session=e,this.emit("connect",e),this.emit("update",e)),e}async connect(t){const e=await this.rpcClient.sendRequest({method:"dc_sessionRequest",params:[{...t,peerMeta:w()}]});return e&&(this.session=e,this.emit("connect",e),this.emit("update",e)),e}async killSession(){return this.disconnect()}async disconnect(){return this.session&&(this.session={approved:!1,chainId:this.session.chainId,chainType:this.session.chainType,accounts:[],wallets:[],selectedWalletId:null}),this.emit("disconnect"),this.emit("update",this.session),this.rpcClient.sendRequest({method:"dc_sessionUpdate",params:[{approved:!1}]})}}class H{connector;clearSessionStorage(){}constructor(){this.connector=new j}}class E extends f{connectorClient;networkConfig;isMetaMask=!1;isDeficonnectProvider=!0;constructor(t,e){super(),this.networkConfig=e,this.connectorClient=t,this.connectorClient.connector.on("connect",()=>{this.emit("connect",{chainId:this.chainId,accounts:this.accounts})}),this.connectorClient.connector.on("disconnect",()=>{this.emit("disconnect",{code:4900,message:"disconnect"})}),this.connectorClient.connector.on("update",()=>{this.emit("chainChanged",this.chainId),this.emit("accountsChanged",this.accounts)})}get wc(){return{connected:!0}}get isDeFiCosmosProvider(){if(this.chainType==="cosmos")return!0}get chainId(){return this.chainType==="eth"?"0x"+Number(this.networkVersion).toString(16):this.connectorClient.connector.session?.chainId??""}get networkVersion(){return this.connectorClient.connector.session?.chainId??"1"}get accounts(){return(this.connectorClient.connector.session?.accounts??[]).map(e=>e.toLocaleLowerCase())}get chainType(){return this.connectorClient.connector.session?.chainType??"eth"}async connectEagerly(t){return this.accounts.length>0?this.accounts:(t&&(this.networkConfig=t),await this.connectorClient.connector.connectEagerly(this.networkConfig),this.accounts)}async connect(t){return this.accounts.length>0?this.accounts:(t&&(this.networkConfig=t),await this.connectorClient.connector.connect(this.networkConfig),this.accounts)}async enable(){return this.connect()}async close(){return this.connectorClient.connector.disconnect()}get connected(){return this.accounts.length>0}async request(t){const e=t.method;switch(e){case"eth_requestAccounts":return await this.connect(),this.accounts;case"eth_chainId":return await this.connectEagerly(),this.chainId;case"eth_accounts":return await this.connectEagerly(),this.accounts;case"wallet_getAllAccounts":return await this.connectEagerly(this.networkConfig),this.wallet_getAllAccounts();case"net_version":return await this.connectEagerly(),this.connectorClient.connector.session?.chainId;case"eth_newFilter":case"eth_newBlockFilter":case"eth_newPendingTransactionFilter":case"eth_uninstallFilter":case"eth_subscribe":throw new u(4200,`not support calling ${e}. Please use your own solution`)}return T.includes(t.method)?this.connectorClient.connector.rpcClient.sendRequest({method:t.method,params:t.params}):e.startsWith("cosmos_")?this.connectorClient.connector.rpcClient.sendRequest({method:"cosmos_proxyJsonRpcRequest",params:[t]}):this.connectorClient.connector.rpcClient.sendRequest({method:"eth_proxyJsonRpcRequest",params:[t]})}async wallet_getAllAccounts(){const t=this.connectorClient.connector.session,e=t?.wallets.find(n=>n.id===t?.selectedWalletId);if(!e)throw new Error("can not find address for special chainId");return e.addresses}async stop(){}async send(t,e){if(typeof t=="string"&&(!e||Array.isArray(e)))return await this.request({method:t,params:e});if(t&&typeof t=="object"&&typeof e=="function"){const{id:n,jsonrpc:i}=t;try{const r={result:await this.request(t),id:n,jsonrpc:i};return e(null,r),r}catch(o){return e(o,{id:n,jsonrpc:i}),{id:n,jsonrpc:i,error:o}}}}async sendAsync(t,e){return this.send(t,e)}get account(){return this.accounts[0]??""}get currentAccountInfo(){const t=this.connectorClient.connector.session?.wallets[0].addresses;if(t)return Object.entries(t).find(([,n])=>n.address===this.account)?.[1]}}const k=()=>{if(window.legacyConnectorClient)return window.legacyConnectorClient;const s=new H;return window.legacyConnectorClient=s,s};window.deficonnectClientGenerator=async()=>k();window.deficonnectProviderGenerator=async s=>{const{connectorClient:t}=s;return new E(t)};window.cryptoconnectProviderGenerator=async s=>{const{clientMeta:{name:t=""}={}}=s,e=k();return new E(e,{name:t,chainType:"eth",chainId:s.supportedChainIds[0],rpcUrl:"",symbol:""})};const $=(s,t)=>{if(s?.length!==t?.length)return!1;if(!s&&!t)return!0;if(s&&t){for(const[e,n]of s.entries())if(e>=t.length||n!==t[e])return!1;return!0}return!1};function I(s){if(s)return["eth","cosmos"].includes(s.chainType)?s:{...s,chainType:"eth"}}class S extends f{connectorClient;networkConfig;isMetaMask="true";isDeficonnectProvider=!0;preAccounts=[];preChainId;constructor(t){super(),this.connectorClient=new x(t),this.connectorClient.on("connect",()=>{this.preAccounts=this.accounts,this.preChainId=this.chainId,this.emit("connect",{chainId:this.chainId,accounts:this.accounts})}),this.connectorClient.on("disconnect",()=>{this.preAccounts=this.accounts,this.preChainId=this.chainId,this.emit("accountsChanged",this.accounts),this.emit("disconnect",{code:4900,message:"disconnect"})}),this.connectorClient.on("update",()=>{this.preChainId?.toString()!==this.chainId.toString()&&(this.preChainId=this.chainId,this.emit("chainChanged",this.chainId)),$(this.preAccounts,this.accounts)||(this.preAccounts=this.accounts,this.emit("accountsChanged",this.accounts))}),this.connectorClient.rpcClient.on("dc_requestDappClientMeta",e=>{const n=w();this.connectorClient.rpcClient.sendResponse({requestId:e.id,result:n})}),this.request=this.request.bind(this),this.connect=this.connect.bind(this),this.connectEagerly=this.connectEagerly.bind(this),this.enable=this.enable.bind(this),this.close=this.close.bind(this),this.send=this.send.bind(this),this.sendAsync=this.sendAsync.bind(this)}get chainId(){return this.chainType==="eth"?"0x"+Number(this.networkVersion).toString(16):this.connectorClient.session?.chainId??""}get networkVersion(){return this.connectorClient.session?.chainId??"1"}get accounts(){return(this.connectorClient.session?.accounts??[]).map(e=>e.toLocaleLowerCase())}get chainType(){return this.connectorClient.session?.chainType??"eth"}async connectEagerly(t){return this.accounts.length>0?this.accounts:(t&&(this.networkConfig=I(t)),this.connectorClient.connectEagerly(this.networkConfig))}async connect(t){return this.accounts.length>0?this.accounts:(t&&(this.networkConfig=I(t)),this.connectorClient.connect({chainType:"eth",...this.networkConfig}))}async enable(){return this.connect()}async close(){return this.connectorClient.disconnect()}get connected(){return this.accounts.length>0}async send(t,e){if(typeof t=="string"&&(!e||Array.isArray(e)))return await this.request({method:t,params:e});if(t&&typeof t=="object"&&typeof e=="function"){const{id:n,jsonrpc:i}=t;try{const r={result:await this.request(t),id:n,jsonrpc:i};return e(null,r),r}catch(o){return e(o,{id:n,jsonrpc:i,error:o}),{id:n,jsonrpc:i,error:o}}}}async sendAsync(t,e){return this.send(t,e)}async request(t){const e=t.method;switch(e){case"eth_requestAccounts":return await this.connect(),this.accounts;case"eth_chainId":return await this.connectEagerly(),this.chainId;case"eth_accounts":return await this.connectEagerly(),this.accounts;case"wallet_getAllAccounts":return await this.connectEagerly(this.networkConfig),this.wallet_getAllAccounts();case"net_version":return await this.connectEagerly(),this.connectorClient.session?.chainId;case"eth_newFilter":case"eth_newBlockFilter":case"eth_newPendingTransactionFilter":case"eth_uninstallFilter":case"eth_subscribe":throw new u(4200,`not support calling ${e}. Please use your own solution`)}return T.includes(t.method)?this.connectorClient.rpcClient.sendRequest({method:t.method,params:t.params}):e.startsWith("cosmos_")?this.connectorClient.rpcClient.sendRequest({method:"cosmos_proxyJsonRpcRequest",params:[t]}):this.connectorClient.rpcClient.sendRequest({method:"eth_proxyJsonRpcRequest",params:[t]})}async wallet_getAllAccounts(){const t=this.connectorClient.session,e=t?.wallets.find(n=>n.id===t?.selectedWalletId);if(!e)throw new Error("can not find address for special chainId");return e.addresses}}window.deficonnect={ethereum:new S({eip6963:!1}),aptos:new N};window.deficonnectProvider=window.deficonnect.ethereum;window.ethereum&&window.ethereum.isMetaMask||(window.ethereum=window.deficonnectProvider);window.aptos||(window.aptos=window.deficonnect.aptos);window.petra||(window.petra=window.deficonnect.aptos);window.martian||(window.martian=new J);const z={uuid:W(),name:"Crypto.com Wallet Extension",icon:`data:image/svg+xml,${encodeURIComponent(B)}`,rdns:"com.crypto.wallet"},Q=new S({eip6963:!0}),L=new CustomEvent("eip6963:announceProvider",{detail:Object.freeze({info:z,provider:Q})});window.dispatchEvent(L);window.addEventListener("eip6963:requestProvider",()=>{window.dispatchEvent(L)});
